// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wiedza.Api.Data;

#nullable disable

namespace Wiedza.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240724123136_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Wiedza.Api.Data.Models.MessageFile", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("message_id");

                    b.Property<Guid>("AttachmentFileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attachment_file_id");

                    b.HasKey("MessageId", "AttachmentFileId")
                        .HasName("pk_message_files");

                    b.HasIndex("AttachmentFileId")
                        .HasDatabaseName("ix_message_files_attachment_file_id");

                    b.ToTable("message_files", (string)null);
                });

            modelBuilder.Entity("Wiedza.Api.Data.Models.UserSalt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("salt");

                    b.HasKey("UserId")
                        .HasName("pk_user_salts");

                    b.ToTable("user_salts", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.AttachmentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<byte[]>("FileBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("file_bytes");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_id");

                    b.Property<DateTimeOffset>("UploadedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Base.Publication", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("expires_at");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("PublicationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("publication_type");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_publications_author_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_publications_category_id");

                    b.ToTable("publications", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Base.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AccountState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("account_state");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("ix_categories_parent_category_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("offer_id");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.HasIndex("OfferId")
                        .HasDatabaseName("ix_chats_offer_id");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("chat_id");

                    b.Property<DateTimeOffset?>("ReadedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("readed_at");

                    b.Property<DateTimeOffset>("SendedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("sended_at");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_messages_author_id");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_messages_chat_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<float>("CompanyProfit")
                        .HasColumnType("real")
                        .HasColumnName("company_profit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<float>("FreelancerProfit")
                        .HasColumnType("real")
                        .HasColumnName("freelancer_profit");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("message");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_id");

                    b.Property<decimal?>("PulicationId")
                        .HasColumnType("decimal(20,0)")
                        .HasColumnName("pulication_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_offers");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_offers_person_id");

                    b.HasIndex("PulicationId")
                        .HasDatabaseName("ix_offers_pulication_id");

                    b.ToTable("offers", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<decimal>("CardNumber")
                        .HasColumnType("decimal(20,0)")
                        .HasColumnName("card_number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<float>("Commission")
                        .HasColumnType("real")
                        .HasColumnName("commission");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<long>("House")
                        .HasColumnType("bigint")
                        .HasColumnName("house");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_id");

                    b.Property<long>("PostalCode")
                        .HasColumnType("bigint")
                        .HasColumnName("postal_code");

                    b.Property<float>("ReceivedAmount")
                        .HasColumnType("real")
                        .HasColumnName("received_amount");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("street");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_payments_person_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.PersonComplaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("administrator_id");

                    b.Property<Guid>("AttachmentFileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attachment_file_id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("finished_at");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_person_complaints");

                    b.HasIndex("AdministratorId")
                        .HasDatabaseName("ix_person_complaints_administrator_id");

                    b.HasIndex("AttachmentFileId")
                        .HasDatabaseName("ix_person_complaints_attachment_file_id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_person_complaints_author_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_person_complaints_person_id");

                    b.ToTable("person_complaints", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.PublicationComplaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("administrator_id");

                    b.Property<Guid>("AttachmentFileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attachment_file_id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("FinishAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("finish_at");

                    b.Property<decimal>("PublicationId")
                        .HasColumnType("decimal(20,0)")
                        .HasColumnName("publication_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_publication_complaints");

                    b.HasIndex("AdministratorId")
                        .HasDatabaseName("ix_publication_complaints_administrator_id");

                    b.HasIndex("AttachmentFileId")
                        .HasDatabaseName("ix_publication_complaints_attachment_file_id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_publication_complaints_author_id");

                    b.HasIndex("PublicationId")
                        .HasDatabaseName("ix_publication_complaints_publication_id");

                    b.ToTable("publication_complaints", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("message");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_id");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_reviews_author_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_reviews_person_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Verification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("ImageDocumentBytes")
                        .IsRequired()
                        .HasMaxLength(10485760)
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image_document_bytes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_id");

                    b.Property<decimal>("Pesel")
                        .HasColumnType("decimal(20,0)")
                        .HasColumnName("pesel");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.Property<DateTimeOffset?>("VerificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("verification_time");

                    b.HasKey("Id")
                        .HasName("pk_verifications");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasDatabaseName("ix_verifications_person_id");

                    b.ToTable("verifications", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.WebsiteBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("NetIncome")
                        .HasColumnType("real")
                        .HasColumnName("net_income");

                    b.Property<float>("TotalBalance")
                        .HasColumnType("real")
                        .HasColumnName("total_balance");

                    b.HasKey("Id")
                        .HasName("pk_website_balances");

                    b.ToTable("website_balances", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Withdraw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("administrator_id");

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<decimal>("CardNumber")
                        .HasColumnType("decimal(20,0)")
                        .HasColumnName("card_number");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("person_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("WithdrawTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("withdraw_time");

                    b.HasKey("Id")
                        .HasName("pk_withdraws");

                    b.HasIndex("AdministratorId")
                        .HasDatabaseName("ix_withdraws_administrator_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_withdraws_person_id");

                    b.ToTable("withdraws", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Project", b =>
                {
                    b.HasBaseType("Wiedza.Core.Models.Data.Base.Publication");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Service", b =>
                {
                    b.HasBaseType("Wiedza.Core.Models.Data.Base.Publication");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Administrator", b =>
                {
                    b.HasBaseType("Wiedza.Core.Models.Data.Base.User");

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Person", b =>
                {
                    b.HasBaseType("Wiedza.Core.Models.Data.Base.User");

                    b.Property<byte[]>("AvatarBytes")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("avatar_bytes");

                    b.Property<float>("Balance")
                        .HasColumnType("real")
                        .HasColumnName("balance");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsVerificated")
                        .HasColumnType("bit")
                        .HasColumnName("is_verificated");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<float?>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("Wiedza.Api.Data.Models.MessageFile", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.AttachmentFile", "AttachmentFile")
                        .WithMany()
                        .HasForeignKey("AttachmentFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_files_files_attachment_file_id");

                    b.HasOne("Wiedza.Core.Models.Data.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_files_messages_message_id");

                    b.Navigation("AttachmentFile");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Wiedza.Api.Data.Models.UserSalt", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_salts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Base.Publication", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publications_persons_author_id");

                    b.HasOne("Wiedza.Core.Models.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_publications_categories_category_id");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Category", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_categories_categories_parent_category_id");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Chat", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chats_offers_offer_id");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Message", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_messages_persons_author_id");

                    b.HasOne("Wiedza.Core.Models.Data.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_chats_chat_id");

                    b.Navigation("Author");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Offer", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_offers_persons_person_id");

                    b.HasOne("Wiedza.Core.Models.Data.Base.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PulicationId")
                        .HasConstraintName("fk_offers_publications_pulication_id");

                    b.Navigation("Person");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Payment", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_persons_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.PersonComplaint", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Administrator", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId")
                        .HasConstraintName("fk_person_complaints_administrators_administrator_id");

                    b.HasOne("Wiedza.Core.Models.Data.AttachmentFile", "AttachmentFile")
                        .WithMany()
                        .HasForeignKey("AttachmentFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_complaints_files_attachment_file_id");

                    b.HasOne("Wiedza.Core.Models.Data.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_complaints_persons_author_id");

                    b.HasOne("Wiedza.Core.Models.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_complaints_persons_person_id");

                    b.Navigation("Administrator");

                    b.Navigation("AttachmentFile");

                    b.Navigation("Author");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.PublicationComplaint", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Administrator", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId")
                        .HasConstraintName("fk_publication_complaints_administrators_administrator_id");

                    b.HasOne("Wiedza.Core.Models.Data.AttachmentFile", "AttachmentFile")
                        .WithMany()
                        .HasForeignKey("AttachmentFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_complaints_files_attachment_file_id");

                    b.HasOne("Wiedza.Core.Models.Data.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_complaints_persons_author_id");

                    b.HasOne("Wiedza.Core.Models.Data.Base.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_complaints_publications_publication_id");

                    b.Navigation("Administrator");

                    b.Navigation("AttachmentFile");

                    b.Navigation("Author");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Review", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_persons_author_id");

                    b.HasOne("Wiedza.Core.Models.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_persons_person_id");

                    b.Navigation("Author");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Verification", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_verifications_persons_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Withdraw", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Administrator", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId")
                        .HasConstraintName("fk_withdraws_administrators_administrator_id");

                    b.HasOne("Wiedza.Core.Models.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_withdraws_persons_person_id");

                    b.Navigation("Administrator");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Project", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Base.Publication", null)
                        .WithOne()
                        .HasForeignKey("Wiedza.Core.Models.Data.Project", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_publications_id");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Service", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Base.Publication", null)
                        .WithOne()
                        .HasForeignKey("Wiedza.Core.Models.Data.Service", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_publications_id");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Administrator", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Base.User", null)
                        .WithOne()
                        .HasForeignKey("Wiedza.Core.Models.Data.Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_admins_users_id");
                });

            modelBuilder.Entity("Wiedza.Core.Models.Data.Person", b =>
                {
                    b.HasOne("Wiedza.Core.Models.Data.Base.User", null)
                        .WithOne()
                        .HasForeignKey("Wiedza.Core.Models.Data.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persons_users_id");
                });
#pragma warning restore 612, 618
        }
    }
}
